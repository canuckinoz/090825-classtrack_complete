{"version":3,"sources":["../src/index.ts","../src/behaviourWeather.ts","../src/abcTracker.ts"],"sourcesContent":["// Explicit re-exports to avoid duplicate type names across modules\n\nexport { computeClassForecast, riskToMetaphor, computeStudentPrediction, computeClassWeatherMetaphor, buildHourlyBuckets } from \"./behaviourWeather\";\nexport type {\n  UUID as WeatherUUID,\n  BehaviourLog,\n  HourRisk,\n  CriticalTime,\n  FocusStudent as WeatherFocusStudent,\n  ClassForecastResult,\n  StudentHourlyPatternBin,\n  StudentPredictionResult,\n  ClassForecastOptions\n} from \"./behaviourWeather\";\n\nexport { computeABCClassInsights, computeABCStudentInsights } from \"./abcTracker\";\nexport type {\n  UUID as ABCUUID,\n  ABCEvent,\n  ABCOptions,\n  ABPair,\n  CountRow,\n  ContextHotspot,\n  FocusStudent as ABCFocusStudent,\n  ABCClassInsights,\n  ABCStudentInsights\n} from \"./abcTracker\";\n\n\n\n","// src/services/behaviourWeather.ts\n// Behaviour Weather System™ — refactored for correctness, robustness, and scale.\n// Backward-compatible with your snapshot (computeClassForecast, riskToMetaphor, etc.).\n\nexport type UUID = string;\n\nexport interface BehaviourLog {\n  created_at: string | number | Date; // ISO or epoch; we sanitize/validate\n  behaviour_type: string;\n  student_id: UUID;\n  tags?: string[];                    // optional — ignored if absent\n  weight?: number;                    // optional — default 1\n}\n\nexport interface HourRisk {\n  hour: number;            // 0..23\n  risk: number;            // 0..1\n  samples: number;         // pos+neg samples used\n}\n\nexport interface CriticalTime {\n  hour: number;\n  probability: number;     // 0..1\n  label: string;\n}\n\nexport interface FocusStudent {\n  student_id: UUID;\n  risk: number;            // neg / (pos + neg + eps)\n  samples: number;         // pos+neg samples used\n}\n\nexport interface ClassForecastResult {\n  risk_level: 1 | 2 | 3 | 4 | 5;\n  overall_probability: number;     // 0..1\n  critical_times: CriticalTime[];\n  focus_students: FocusStudent[];\n  diagnostics?: {\n    sample_size: number;\n    window_days: number;\n    insufficient_data: boolean;\n  };\n}\n\nexport interface StudentHourlyPatternBin { pos: number; neg: number; }\n\nexport interface StudentPredictionResult {\n  student_id: UUID;\n  current_positive_ratio: number;   // 0..1\n  risk_level: 1 | 2 | 3 | 4;\n  hourly_pattern: Array<{ hour: number; positive: number; negative: number; risk: number }>;\n  skill_suggestions: string[];\n}\n\n// -----------------------------\n// Config & helpers\n// -----------------------------\n\nconst DEFAULT_POSITIVE = [\n  \"Participation\",\n  \"Helping Others\",\n  \"Problem Solving\",\n  \"On Task\",\n  \"Peer Support\",\n];\n\nconst DEFAULT_NEGATIVE = [\n  \"Needs Movement\",\n  \"Feeling Overwhelmed\",\n  \"Conflict Resolution\",\n  \"Disengaged\",\n  \"Escalation\",\n];\n\n// Slightly stronger smoothing than 0.001 to stabilize tiny samples\nconst EPSILON = 1e-6;\nconst PRIOR_RISK = 0.30;      // Bayesian prior toward 0.30 when samples are tiny\nconst PRIOR_STRENGTH = 2;     // pseudo-counts for the prior (tune with data)\n\nfunction clamp01(x: number) { return Math.max(0, Math.min(1, x)); }\nfunction toHour(d: Date)     { return d.getHours(); }\nfunction toLower(s: string)  { return s.toLowerCase(); }\n\n/** CRA/Node-safe URL-less date parsing + guard */\nfunction safeDate(ts: string | number | Date): Date | null {\n  try {\n    const d = ts instanceof Date ? ts : new Date(ts);\n    return isNaN(d.getTime()) ? null : d;\n  } catch { return null; }\n}\n\n/** Weighted average hour emphasis: 10–14 heavier (school transitions) */\nfunction defaultHourWeight(h: number) { return (h >= 10 && h <= 14) ? 1.2 : 1.0; }\n\n/** Map overall probability to risk level (1..5) — keep your thresholds */\nfunction mapOverallToRiskLevel(p: number): 1 | 2 | 3 | 4 | 5 {\n  return (p < 0.20 ? 1 : p < 0.35 ? 2 : p < 0.50 ? 3 : p < 0.70 ? 4 : 5) as 1|2|3|4|5;\n}\n\n/** Your existing metaphor mapping */\nexport function riskToMetaphor(risk: 1 | 2 | 3 | 4 | 5): string {\n  const map: Record<number, string> = {\n    1: \"Sunny\",\n    2: \"Partly Cloudy\",\n    3: \"Cloudy\",\n    4: \"Rainy\",\n    5: \"Stormy\",\n  };\n  return map[risk] ?? \"Cloudy\";\n}\n\nfunction hourReadable(h: number) {\n  const d = new Date(); d.setHours(h, 0, 0, 0);\n  return d.toLocaleTimeString([], { hour: \"numeric\", minute: \"2-digit\" });\n}\n\nfunction labelForHotspotHour(hour: number, topTag?: string): string {\n  if (hour === 14) return `${hourReadable(hour)} • post-lunch`;\n  if (hour === 10) return `${hourReadable(hour)} • mid-morning transition`;\n  if (topTag)      return `${hourReadable(hour)} • ${topTag.replace(/-/g, \" \")}`;\n  return `${hourReadable(hour)} • in-class transition`;\n}\n\n// -----------------------------\n// Core: Class forecast\n// -----------------------------\n\nexport interface ClassForecastOptions {\n  /** restrict to last N days; default 14 */\n  windowDays?: number;\n  /** customize positive/negative lists */\n  positiveTypes?: string[];\n  negativeTypes?: string[];\n  /** how many hotspot hours to return; default 3 */\n  topKHotspots?: number;\n  /** min samples required for a hotspot hour; default 1 */\n  minSamplesPerHour?: number;\n  /** min total events for a focus student; default 3 */\n  minSamplesPerStudent?: number;\n  /** override hour weighting (0..23) */\n  hourWeight?: (h: number) => number;\n  /** restrict to subset of hours if desired; default all 24 used */\n  allowedHours?: number[];\n}\n\n/**\n * Compute class-level behaviour forecast.\n * Single-pass O(n); robust to invalid timestamps; Bayesian-smooths tiny hours.\n */\nexport function computeClassForecast(\n  logs: BehaviourLog[],\n  options: ClassForecastOptions = {}\n): ClassForecastResult {\n  const {\n    windowDays = 14,\n    positiveTypes = DEFAULT_POSITIVE,\n    negativeTypes = DEFAULT_NEGATIVE,\n    topKHotspots = 3,\n    minSamplesPerHour = 1,\n    minSamplesPerStudent = 3,\n    hourWeight = defaultHourWeight,\n    allowedHours, // if provided, we’ll still allocate 24 buckets but include only these in weighting/hotspots\n  } = options;\n\n  const since = new Date(Date.now() - windowDays * 24 * 60 * 60 * 1000);\n  const posSet = new Set(positiveTypes.map(toLower));\n  const negSet = new Set(negativeTypes.map(toLower));\n  const allow = allowedHours ? new Set(allowedHours) : null;\n\n  // 24 buckets + per-student tallies; also collect per-hour top tags if present\n  const byHour = Array.from({ length: 24 }, () => ({\n    pos: 0, neg: 0,\n    tags: new Map<string, number>()\n  }));\n  const byStudent = new Map<UUID, { pos: number; neg: number }>();\n\n  let used = 0;\n\n  for (const row of logs || []) {\n    const d = safeDate(row.created_at);\n    if (!d) continue;\n    if (d < since || d > new Date()) continue;\n\n    const hour = toHour(d);\n    if (hour < 0 || hour > 23) continue;\n\n    // If a custom hour set is given, we still record samples (for students),\n    // but will exclude hour from weighting/hotspot selection later unless allowed.\n    const b = byHour[hour];\n\n    const type = toLower(String(row.behaviour_type || \"\"));\n    const w = (typeof row.weight === \"number\" && isFinite(row.weight) && row.weight > 0) ? row.weight : 1;\n\n    let isPos = posSet.has(type);\n    let isNeg = negSet.has(type);\n    if (!isPos && !isNeg) {\n      // Unknown/neutral type — ignore for risk; still allow tags to inform labels.\n    } else {\n      used++;\n      if (isPos) b.pos += w;\n      if (isNeg) b.neg += w;\n      const sid = row.student_id;\n      if (!byStudent.has(sid)) byStudent.set(sid, { pos: 0, neg: 0 });\n      const s = byStudent.get(sid)!;\n      if (isPos) s.pos += w;\n      if (isNeg) s.neg += w;\n    }\n\n    if (row.tags?.length) {\n      for (const t of row.tags) {\n        const key = toLower(t);\n        b.tags.set(key, (b.tags.get(key) || 0) + 1);\n      }\n    }\n  }\n\n  // Compute per-hour risk with Bayesian shrinkage toward PRIOR_RISK\n  const hourRisk: HourRisk[] = byHour.map((bin, h) => {\n    const n = bin.pos + bin.neg;\n    // (neg + alpha*prior) / (n + alpha)\n    const p = (bin.neg + PRIOR_STRENGTH * PRIOR_RISK) / (n + PRIOR_STRENGTH + EPSILON);\n    return { hour: h, risk: clamp01(p), samples: n };\n  });\n\n  // Overall probability: weighted mean over allowed hours (or all if none specified)\n  let num = 0, den = 0;\n  for (const r of hourRisk) {\n    if (allow && !allow.has(r.hour)) continue;\n    const w = hourWeight(r.hour);\n    num += r.risk * w;\n    den += w;\n  }\n  const overall = den > 0 ? clamp01(num / den) : PRIOR_RISK;\n  const risk_level = mapOverallToRiskLevel(overall);\n\n  // Hotspots: top hours with sufficient samples; break ties by hour number for stability\n  const hotspotPool = hourRisk\n    .filter(r => r.samples >= minSamplesPerHour && (!allow || allow.has(r.hour)));\n  hotspotPool.sort((a, b) => (b.risk - a.risk) || (a.hour - b.hour));\n\n  const critical_times: CriticalTime[] = hotspotPool.slice(0, topKHotspots).map(r => {\n    // pick dominant tag (if any) to enrich the label\n    const tagEntries = [...byHour[r.hour].tags.entries()].sort((a, b) => b[1] - a[1]);\n    const topTag = tagEntries[0]?.[0];\n    return {\n      hour: r.hour,\n      probability: Number(r.risk.toFixed(2)),\n      label: labelForHotspotHour(r.hour, topTag),\n    };\n  });\n\n  // Focus students: highest neg share with min samples\n  const focus_students: FocusStudent[] = [...byStudent.entries()]\n    .map(([id, s]) => {\n      const total = s.pos + s.neg;\n      const risk = total > 0 ? s.neg / (total + EPSILON) : 0;\n      return { student_id: id, risk, samples: total };\n    })\n    .filter(x => x.samples >= minSamplesPerStudent)\n    .sort((a, b) => (b.risk - a.risk) || (b.samples - a.samples))\n    .slice(0, 5);\n\n  return {\n    risk_level,\n    overall_probability: Number(overall.toFixed(2)),\n    critical_times,\n    focus_students,\n    diagnostics: {\n      sample_size: used,\n      window_days: windowDays,\n      insufficient_data: used < 20, // tune threshold per cohort size\n    },\n  };\n}\n\n// -----------------------------\n// Student-specific prediction & suggestions\n// -----------------------------\n\nexport function computeStudentPrediction(\n  student_id: UUID,\n  behaviours: Array<{ created_at: string | number | Date; behaviour_type: string }>,\n  options?: { positiveTypes?: string[]; negativeTypes?: string[] }\n): StudentPredictionResult {\n  const positive = new Set((options?.positiveTypes ?? DEFAULT_POSITIVE).map(toLower));\n  const negative = new Set((options?.negativeTypes ?? DEFAULT_NEGATIVE).map(toLower));\n  const hourly: StudentHourlyPatternBin[] = Array.from({ length: 24 }, () => ({ pos: 0, neg: 0 }));\n\n  let pos = 0, neg = 0;\n\n  for (const b of behaviours || []) {\n    const d = safeDate(b.created_at);\n    if (!d) continue;\n    const h = toHour(d);\n    const t = toLower(String(b.behaviour_type || \"\"));\n    if (positive.has(t)) { pos++; hourly[h].pos++; }\n    else if (negative.has(t)) { neg++; hourly[h].neg++; }\n  }\n\n  const total = pos + neg;\n  const ratio = total > 0 ? pos / (total + EPSILON) : 0.5;\n  const risk_level = (ratio < 0.30 ? 4 : ratio < 0.50 ? 3 : ratio < 0.70 ? 2 : 1) as 1 | 2 | 3 | 4;\n\n  // Suggestions (concise, non-punitive, driven by pattern)\n  const suggestions: string[] = [];\n  if (neg > pos) suggestions.push(\"Prime with roles + specific praise before transitions\");\n  if (hourly.some(h => h.neg > h.pos * 2)) suggestions.push(\"Schedule demanding tasks in low-risk hours\");\n  if (total < 3) suggestions.push(\"Collect a few more observations this week\");\n  if (risk_level >= 3) suggestions.push(\"Plan movement breaks and co-regulation cues\");\n\n  return {\n    student_id,\n    current_positive_ratio: Number(ratio.toFixed(3)),\n    risk_level,\n    hourly_pattern: hourly.map((h, i) => ({\n      hour: i, positive: h.pos, negative: h.neg,\n      risk: h.neg / (h.pos + h.neg + EPSILON),\n    })),\n    skill_suggestions: [...new Set(suggestions)].slice(0, 5),\n  };\n}\n\n// -----------------------------\n// Convenience wrappers\n// -----------------------------\n\nexport function computeClassWeatherMetaphor(logs: BehaviourLog[], opts?: ClassForecastOptions): string {\n  const fc = computeClassForecast(logs, opts);\n  return riskToMetaphor(fc.risk_level);\n}\n\n/** Helper: build hourly buckets (useful for charts); respects polarity lists */\nexport function buildHourlyBuckets(\n  logs: BehaviourLog[],\n  positiveTypes: string[] = DEFAULT_POSITIVE,\n  negativeTypes: string[] = DEFAULT_NEGATIVE\n): Array<{ hour: number; pos: number; neg: number }> {\n  const posSet = new Set(positiveTypes.map(toLower));\n  const negSet = new Set(negativeTypes.map(toLower));\n  const buckets = Array.from({ length: 24 }, (_, hour) => ({ hour, pos: 0, neg: 0 }));\n  for (const row of logs || []) {\n    const d = safeDate(row.created_at);\n    if (!d) continue;\n    const h = toHour(d);\n    const t = toLower(String(row.behaviour_type || \"\"));\n    if (posSet.has(t)) buckets[h].pos++;\n    else if (negSet.has(t)) buckets[h].neg++;\n  }\n  return buckets;\n}\n\n// Re-export from local implementation\n// Note: This file contains the full implementation, no need to re-export\n\n\n","// src/services/abcTracker.ts\n// ABC Tracker — scalable core for Antecedent → Behavior → Consequence analytics.\n// Single-pass O(n), robust to sparse/noisy data, ready for 330+ schools.\n\nexport type UUID = string;\n\n/** Raw ABC event coming from your DB/API */\nexport interface ABCEvent {\n  studentId: UUID;\n  timestamp: string | number | Date; // ISO/epoch; sanitized below\n  antecedent: string;                // e.g., \"Transition\", \"Task-Demand\", \"Noise\", \"Peer Interaction\"\n  behavior: string;                  // e.g., \"Calling Out\", \"Off Task\", \"Refusal\", \"Aggression\", \"Participation\"\n  consequence?: string;              // e.g., \"Redirect\", \"Planned Ignore\", \"Break\", \"Loss of Privilege\"\n  intensity?: number;                // 1..5 (optional)\n  durationSec?: number;              // optional\n  tags?: string[];                   // optional contextual tags (e.g., \"post-lunch\", \"group-work\")\n  weight?: number;                   // optional event weight (default 1)\n}\n\n/** Configuration */\nexport interface ABCOptions {\n  windowDays?: number;                // default 14\n  positiveBehaviors?: string[];       // what you consider skill-building/positive\n  negativeBehaviors?: string[];       // behaviors considered challenging\n  minSamplesForPair?: number;         // default 5 (support)\n  topKPairs?: number;                 // default 8\n  topKAntecedents?: number;           // default 8\n  topKConsequences?: number;          // default 8\n  topKContexts?: number;              // default 5\n  minSamplesPerStudent?: number;      // default 3\n  /** Laplace smoothing for P(B|A). Default 1. */\n  pairAlpha?: number;\n  /** Prior probability of “negative” for context odds (stabilizes tiny samples). Default 0.30. */\n  priorNeg?: number;\n}\n\nexport interface ABPair {\n  antecedent: string;\n  behavior: string;\n  support: number;       // count(A,B)\n  confidence: number;    // P(B|A) with smoothing\n  lift: number;          // confidence / P(B)\n}\n\nexport interface CountRow { name: string; count: number; rate?: number; }\n\nexport interface ContextHotspot {\n  key: string;           // hour label like \"14:00\" or tag like \"post-lunch\"\n  negRate: number;       // neg / (pos+neg)\n  delta: number;         // negRate - baselineNeg\n  support: number;       // total samples in this context\n  kind: \"hour\" | \"tag\";\n}\n\nexport interface FocusStudent {\n  studentId: UUID;\n  negShare: number;      // neg / (pos+neg)\n  samples: number;       // pos+neg\n  avgIntensity?: number; // mean intensity if provided\n  suggestions: string[]; // concise, non-punitive\n}\n\nexport interface ABCClassInsights {\n  summary: {\n    total: number;\n    windowDays: number;\n    baselineNeg: number;        // overall neg rate\n    insufficientData: boolean;  // true when total < 20 (tune)\n  };\n  behaviours: CountRow[];       // freq by behavior\n  antecedents: CountRow[];      // freq by antecedent\n  consequences: CountRow[];     // freq by consequence\n  abPairs: ABPair[];            // antecedent→behavior rules\n  contextHotspots: ContextHotspot[]; // by hour & tags\n  focusStudents: FocusStudent[];\n}\n\n/* -------------------- Helpers -------------------- */\n\nconst EPS = 1e-6;\nconst DEFAULT_WINDOW_DAYS = 14;\nconst DEFAULT_POSITIVE = [\"Participation\", \"Helping Others\", \"Problem Solving\", \"On Task\", \"Peer Support\"];\nconst DEFAULT_NEGATIVE = [\"Calling Out\", \"Off Task\", \"Refusal\", \"Aggression\", \"Disruption\", \"Elopement\"];\n\nfunction safeDate(t: string | number | Date): Date | null {\n  try {\n    const d = t instanceof Date ? t : new Date(t);\n    return isNaN(d.getTime()) ? null : d;\n  } catch { return null; }\n}\nfunction hourKey(h: number): string {\n  const d = new Date(); d.setHours(h,0,0,0);\n  return d.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\n}\nfunction normKey(s?: string) { return (s || \"\").trim(); }\n\n/* -------------------- Core: Class insights -------------------- */\n\nexport function computeABCClassInsights(\n  events: ABCEvent | ABCEvent[],\n  opts: ABCOptions = {}\n): ABCClassInsights {\n  const {\n    windowDays = DEFAULT_WINDOW_DAYS,\n    positiveBehaviors = DEFAULT_POSITIVE,\n    negativeBehaviors = DEFAULT_NEGATIVE,\n    minSamplesForPair = 5,\n    topKPairs = 8,\n    topKAntecedents = 8,\n    topKConsequences = 8,\n    topKContexts = 5,\n    minSamplesPerStudent = 3,\n    pairAlpha = 1,\n    priorNeg = 0.30,\n  } = opts;\n\n  const since = new Date(Date.now() - windowDays * 24 * 60 * 60 * 1000);\n  const posSet = new Set(positiveBehaviors.map(b => b.toLowerCase()));\n  const negSet = new Set(negativeBehaviors.map(b => b.toLowerCase()));\n\n  // Tallies\n  const behCount = new Map<string, number>();\n  const antCount = new Map<string, number>();\n  const conCount = new Map<string, number>();\n\n  // AB co-occurrence: antecedent -> (behavior -> count)\n  const ab = new Map<string, Map<string, number>>();\n\n  // Student profiles\n  const byStudent = new Map<UUID, { pos: number; neg: number; intensitySum: number; intensityN: number }>();\n\n  // Contexts\n  const hourContext = Array.from({ length: 24 }, () => ({ pos: 0, neg: 0 }));\n  const tagContext = new Map<string, { pos: number; neg: number }>();\n\n  let total = 0, posTotal = 0, negTotal = 0;\n\n  for (const e of (Array.isArray(events) ? events : [events]) || []) {\n    const d = safeDate(e.timestamp);\n    if (!d || d < since || d > new Date()) continue;\n\n    const hour = d.getHours();\n    const w = (typeof e.weight === \"number\" && isFinite(e.weight) && e.weight > 0) ? e.weight : 1;\n\n    const A = normKey(e.antecedent);\n    const B = normKey(e.behavior);\n    const C = normKey(e.consequence);\n    if (!B) continue; // must have a behavior to count\n\n    total += w;\n\n    // behavior polarity\n    const bLower = B.toLowerCase();\n    const isPos = posSet.has(bLower);\n    const isNeg = negSet.has(bLower);\n    if (isPos) posTotal += w;\n    if (isNeg) negTotal += w;\n\n    // 1) simple counts\n    behCount.set(B, (behCount.get(B) || 0) + w);\n    if (A) antCount.set(A, (antCount.get(A) || 0) + w);\n    if (C) conCount.set(C, (conCount.get(C) || 0) + w);\n\n    // 2) AB pairs\n    if (A) {\n      if (!ab.has(A)) ab.set(A, new Map());\n      const m = ab.get(A)!;\n      m.set(B, (m.get(B) || 0) + w);\n    }\n\n    // 3) student profile\n    const sid = e.studentId;\n    if (!byStudent.has(sid)) byStudent.set(sid, { pos: 0, neg: 0, intensitySum: 0, intensityN: 0 });\n    const sp = byStudent.get(sid)!;\n    if (isPos) sp.pos += w;\n    if (isNeg) sp.neg += w;\n    if (typeof e.intensity === \"number\" && isFinite(e.intensity)) {\n      sp.intensitySum += e.intensity * w;\n      sp.intensityN += w;\n    }\n\n    // 4) context: hour + tags\n    if (isPos) hourContext[hour].pos += w;\n    if (isNeg) hourContext[hour].neg += w;\n\n    if (e.tags?.length) {\n      for (const t of e.tags) {\n        const key = t.toLowerCase().trim();\n        if (!key) continue;\n        if (!tagContext.has(key)) tagContext.set(key, { pos: 0, neg: 0 });\n        const tc = tagContext.get(key)!;\n        if (isPos) tc.pos += w;\n        if (isNeg) tc.neg += w;\n      }\n    }\n  }\n\n  // baseline negative rate\n  const baselineNeg = (negTotal + priorNeg) / (posTotal + negTotal + 1); // slight stabilizer\n\n  // counts → sorted rows with rate\n  const toSortedRows = (m: Map<string, number>): CountRow[] =>\n    [...m.entries()]\n      .map(([name, count]) => ({ name, count, rate: count / (total + EPS) }))\n      .sort((a, b) => b.count - a.count);\n\n  const behaviours = toSortedRows(behCount).slice(0, 50);\n  const antecedents = toSortedRows(antCount).slice(0, topKAntecedents);\n  const consequences = toSortedRows(conCount).slice(0, topKConsequences);\n\n  // AB rules: confidence P(B|A) with Laplace smoothing; lift against P(B)\n  const pB = new Map<string, number>();\n  for (const [b, c] of behCount) pB.set(b, (c + 1) / (total + behCount.size)); // Laplace for marginal\n  const abPairs: ABPair[] = [];\n  for (const [A, mapB] of ab.entries()) {\n    const suppA = (antCount.get(A) || 0);\n    for (const [B, suppAB] of mapB.entries()) {\n      const conf = (suppAB + pairAlpha) / (suppA + pairAlpha * mapB.size + EPS);\n      const lift = conf / (pB.get(B) || (1 / (total + behCount.size)));\n      if (suppAB >= minSamplesForPair) {\n        abPairs.push({ antecedent: A, behavior: B, support: suppAB, confidence: Number(conf.toFixed(3)), lift: Number(lift.toFixed(3)) });\n      }\n    }\n  }\n  abPairs.sort((a, b) => (b.confidence - a.confidence) || (b.support - a.support));\n  const abPairsTop = abPairs.slice(0, topKPairs);\n\n  // Context hotspots: hours & tags with higher-than-baseline neg rate\n  const hourHotspots: ContextHotspot[] = hourContext.map((bin, h) => {\n    const n = bin.pos + bin.neg;\n    const r = n > 0 ? bin.neg / (n + EPS) : 0;\n    return { key: hourKey(h), negRate: Number(r.toFixed(3)), delta: Number((r - baselineNeg).toFixed(3)), support: n, kind: \"hour\" as const };\n  }).filter(x => x.support > 0).sort((a,b) => (b.delta - a.delta) || (b.support - a.support)).slice(0, topKContexts);\n\n  const tagHotspots: ContextHotspot[] = [...tagContext.entries()].map(([k, bin]) => {\n    const n = bin.pos + bin.neg;\n    const r = n > 0 ? bin.neg / (n + EPS) : 0;\n    return { key: k, negRate: Number(r.toFixed(3)), delta: Number((r - baselineNeg).toFixed(3)), support: n, kind: \"tag\" as const };\n  }).filter(x => x.support >= 3).sort((a,b) => (b.delta - a.delta) || (b.support - a.support)).slice(0, topKContexts);\n\n  // Focus students\n  const focusStudents: FocusStudent[] = [...byStudent.entries()].map(([id, s]) => {\n    const n = s.pos + s.neg;\n    const share = n > 0 ? s.neg / (n + EPS) : 0;\n    const avgInt = s.intensityN > 0 ? s.intensitySum / s.intensityN : undefined;\n    const suggestions: string[] = [];\n    // quick, non-punitive suggestions\n    if (share >= 0.7) suggestions.push(\"Immediate co-regulation; shorten task with choice of two\");\n    else if (share >= 0.5) suggestions.push(\"Prime with role; schedule short movement breaks\");\n    if ((avgInt || 0) >= 3) suggestions.push(\"Plan calm-start + de-escalation script\");\n    return { studentId: id, negShare: Number(share.toFixed(3)), samples: n, avgIntensity: avgInt ? Number(avgInt.toFixed(2)) : undefined, suggestions };\n  }).filter(s => s.samples >= minSamplesPerStudent)\n    .sort((a, b) => (b.negShare - a.negShare) || (b.samples - a.samples))\n    .slice(0, 10);\n\n  return {\n    summary: {\n      total,\n      windowDays,\n      baselineNeg: Number(baselineNeg.toFixed(3)),\n      insufficientData: total < 20,\n    },\n    behaviours,\n    antecedents,\n    consequences,\n    abPairs: abPairsTop,\n    contextHotspots: [...hourHotspots, ...tagHotspots],\n    focusStudents,\n  };\n}\n\n/* -------------------- Per-student insights -------------------- */\n\nexport interface ABCStudentInsights {\n  studentId: UUID;\n  total: number;\n  negShare: number;\n  topAntecedents: CountRow[];\n  topBehaviours: CountRow[];\n  topConsequences: CountRow[];\n  highRiskHours: ContextHotspot[];\n  suggestions: string[];\n}\n\nexport function computeABCStudentInsights(\n  studentId: UUID,\n  events: ABCEvent[],\n  opts: ABCOptions = {}\n): ABCStudentInsights {\n  const { windowDays = DEFAULT_WINDOW_DAYS, positiveBehaviors = DEFAULT_POSITIVE, negativeBehaviors = DEFAULT_NEGATIVE } = opts;\n  const since = new Date(Date.now() - windowDays * 24 * 60 * 60 * 1000);\n  const posSet = new Set(positiveBehaviors.map(b => b.toLowerCase()));\n  const negSet = new Set(negativeBehaviors.map(b => b.toLowerCase()));\n\n  const beh = new Map<string, number>();\n  const ant = new Map<string, number>();\n  const con = new Map<string, number>();\n  const hours = Array.from({ length: 24 }, () => ({ pos: 0, neg: 0 }));\n\n  let pos = 0, neg = 0, total = 0;\n\n  for (const e of events || []) {\n    if (e.studentId !== studentId) continue;\n    const d = safeDate(e.timestamp);\n    if (!d || d < since || d > new Date()) continue;\n\n    const h = d.getHours();\n    const B = normKey(e.behavior);\n    const A = normKey(e.antecedent);\n    const C = normKey(e.consequence);\n\n    if (!B) continue;\n    total++;\n\n    const bLower = B.toLowerCase();\n    const isPos = posSet.has(bLower);\n    const isNeg = negSet.has(bLower);\n    if (isPos) { pos++; hours[h].pos++; }\n    if (isNeg) { neg++; hours[h].neg++; }\n\n    beh.set(B, (beh.get(B) || 0) + 1);\n    if (A) ant.set(A, (ant.get(A) || 0) + 1);\n    if (C) con.set(C, (con.get(C) || 0) + 1);\n  }\n\n  const negShare = total > 0 ? neg / (pos + neg + EPS) : 0;\n\n  const toRows = (m: Map<string, number>) => [...m.entries()].map(([name, count]) => ({ name, count })).sort((a,b)=>b.count-a.count).slice(0,5);\n  const hi = hours.map((bin, h) => {\n    const n = bin.pos + bin.neg;\n    const r = n > 0 ? bin.neg / (n + EPS) : 0;\n    return { key: hourKey(h), negRate: Number(r.toFixed(3)), delta: 0, support: n, kind: \"hour\" as const };\n  }).filter(x => x.support > 0).sort((a,b)=>b.negRate-a.negRate).slice(0,3);\n\n  const suggestions: string[] = [];\n  if (negShare >= 0.5) suggestions.push(\"Prime with role; specific praise before transitions\");\n  if (hi[0]?.negRate >= 0.6) suggestions.push(`Plan supports around ${hi[0].key} (timer, chunking, movement cue)`);\n  if (total < 3) suggestions.push(\"Collect a few more observations this week\");\n\n  return {\n    studentId,\n    total,\n    negShare: Number(negShare.toFixed(3)),\n    topAntecedents: toRows(ant),\n    topBehaviours: toRows(beh),\n    topConsequences: toRows(con),\n    highRiskHours: hi,\n    suggestions: [...new Set(suggestions)].slice(0,5),\n  };\n}\n\n// Re-export from local implementation\n// Note: This file contains the full implementation, no need to re-export\n\n\n"],"mappings":"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","names":["_a","DEFAULT_POSITIVE","DEFAULT_NEGATIVE","safeDate"]}