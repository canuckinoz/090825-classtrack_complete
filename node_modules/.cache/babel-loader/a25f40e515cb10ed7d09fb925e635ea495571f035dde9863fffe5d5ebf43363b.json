{"ast":null,"code":"var _jsxFileName = \"/Users/Kevin/Downloads/090825 classtrack_complete/src/context/GlobalState.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\n\n// Create a context for global state.  This holds user auth status,\n// behaviour logs and prediction data.  State transitions are defined\n// in the reducer function below.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalContext = /*#__PURE__*/createContext();\nconst initialState = {\n  user: null,\n  token: null,\n  logs: [],\n  predictions: {},\n  loading: false,\n  error: null\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        logs: [],\n        predictions: {}\n      };\n    case 'SET_LOGS':\n      return {\n        ...state,\n        logs: action.payload\n      };\n    case 'ADD_LOG':\n      return {\n        ...state,\n        logs: [...state.logs, action.payload]\n      };\n    case 'SET_PREDICTIONS':\n      return {\n        ...state,\n        predictions: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n}\nexport function GlobalProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook for consuming the context\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = GlobalProvider;\nexport function useGlobalContext() {\n  _s2();\n  return useContext(GlobalContext);\n}\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","GlobalContext","initialState","user","token","logs","predictions","loading","error","reducer","state","action","type","payload","GlobalProvider","children","_s","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","$RefreshReg$"],"sources":["/Users/Kevin/Downloads/090825 classtrack_complete/src/context/GlobalState.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\n\n// Create a context for global state.  This holds user auth status,\n// behaviour logs and prediction data.  State transitions are defined\n// in the reducer function below.\n\nconst GlobalContext = createContext();\n\nconst initialState = {\n  user: null,\n  token: null,\n  logs: [],\n  predictions: {},\n  loading: false,\n  error: null\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      return { ...state, user: action.payload.user, token: action.payload.token, error: null };\n    case 'LOGOUT':\n      return { ...state, user: null, token: null, logs: [], predictions: {} };\n    case 'SET_LOGS':\n      return { ...state, logs: action.payload };\n    case 'ADD_LOG':\n      return { ...state, logs: [...state.logs, action.payload] };\n    case 'SET_PREDICTIONS':\n      return { ...state, predictions: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n    default:\n      return state;\n  }\n}\n\nexport function GlobalProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <GlobalContext.Provider value={{ state, dispatch }}>\n      {children}\n    </GlobalContext.Provider>\n  );\n}\n\n// Custom hook for consuming the context\nexport function useGlobalContext() {\n  return useContext(GlobalContext);\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,QAAQ,OAAO;;AAEpE;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,aAAa,gBAAGL,aAAa,CAAC,CAAC;AAErC,MAAMM,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,EAAE;EACRC,WAAW,EAAE,CAAC,CAAC;EACfC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,SAASC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC9B,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,eAAe;MAClB,OAAO;QAAE,GAAGF,KAAK;QAAEP,IAAI,EAAEQ,MAAM,CAACE,OAAO,CAACV,IAAI;QAAEC,KAAK,EAAEO,MAAM,CAACE,OAAO,CAACT,KAAK;QAAEI,KAAK,EAAE;MAAK,CAAC;IAC1F,KAAK,QAAQ;MACX,OAAO;QAAE,GAAGE,KAAK;QAAEP,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE,IAAI;QAAEC,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAE,CAAC;MAAE,CAAC;IACzE,KAAK,UAAU;MACb,OAAO;QAAE,GAAGI,KAAK;QAAEL,IAAI,EAAEM,MAAM,CAACE;MAAQ,CAAC;IAC3C,KAAK,SAAS;MACZ,OAAO;QAAE,GAAGH,KAAK;QAAEL,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAEM,MAAM,CAACE,OAAO;MAAE,CAAC;IAC5D,KAAK,iBAAiB;MACpB,OAAO;QAAE,GAAGH,KAAK;QAAEJ,WAAW,EAAEK,MAAM,CAACE;MAAQ,CAAC;IAClD,KAAK,WAAW;MACd,OAAO;QAAE,GAAGH,KAAK;QAAEF,KAAK,EAAEG,MAAM,CAACE;MAAQ,CAAC;IAC5C;MACE,OAAOH,KAAK;EAChB;AACF;AAEA,OAAO,SAASI,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACN,KAAK,EAAEO,QAAQ,CAAC,GAAGnB,UAAU,CAACW,OAAO,EAAEP,YAAY,CAAC;EAC3D,oBACEF,OAAA,CAACC,aAAa,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAET,KAAK;MAAEO;IAAS,CAAE;IAAAF,QAAA,EAChDA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B;;AAEA;AAAAP,EAAA,CATgBF,cAAc;AAAAU,EAAA,GAAdV,cAAc;AAU9B,OAAO,SAASW,gBAAgBA,CAAA,EAAG;EAAAC,GAAA;EACjC,OAAO7B,UAAU,CAACI,aAAa,CAAC;AAClC;AAACyB,GAAA,CAFeD,gBAAgB;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}