{"ast":null,"code":"import { create } from \"zustand\";\n\n// Minimal, safe defaults so nothing crashes while refactoring.\nconst initialStudents = [{\n  id: 1,\n  name: \"Emma Thompson\",\n  recentActivity: \"none\",\n  status: \"thriving\",\n  positiveRatio: 0.9\n}, {\n  id: 2,\n  name: \"Liam Chen\",\n  recentActivity: \"none\",\n  status: \"growing\",\n  positiveRatio: 0.7\n}, {\n  id: 3,\n  name: \"Sophie Taylor\",\n  recentActivity: \"none\",\n  status: \"resting\",\n  positiveRatio: 0.4\n}];\nexport const useStore = create((set, get) => ({\n  // UI\n  currentView: \"weather\",\n  // \"weather\" | \"garden\" | \"constellation\" | \"analytics\"\n  setView: view => set({\n    currentView: view\n  }),\n  // Data\n  students: initialStudents,\n  behaviours: [],\n  // QuickLog behaviour types (aligned with your non‑punitive design)\n  behaviourTypes: [{\n    id: 1,\n    name: \"Participation\",\n    type: \"positive\",\n    color: \"#4A7C59\",\n    icon: \"✋\"\n  }, {\n    id: 2,\n    name: \"Helping Others\",\n    type: \"positive\",\n    color: \"#673AB7\",\n    icon: \"🤝\"\n  }, {\n    id: 3,\n    name: \"Problem Solving\",\n    type: \"positive\",\n    color: \"#1976D2\",\n    icon: \"🧩\"\n  }, {\n    id: 4,\n    name: \"Needs Movement\",\n    type: \"support\",\n    color: \"#FF9800\",\n    icon: \"🏃\"\n  }, {\n    id: 5,\n    name: \"Feeling Overwhelmed\",\n    type: \"support\",\n    color: \"#E91E63\",\n    icon: \"🌊\"\n  }, {\n    id: 6,\n    name: \"Conflict Resolution\",\n    type: \"growth\",\n    color: \"#9C27B0\",\n    icon: \"🤝\"\n  }],\n  // Actions\n  logBehaviour: ({\n    studentId,\n    behaviourId,\n    note = \"\"\n  }) => {\n    const entry = {\n      id: Date.now(),\n      studentId,\n      behaviourId,\n      note,\n      timestamp: new Date()\n    };\n    const behaviours = [...get().behaviours, entry];\n\n    // light update to student's recentActivity\n    const students = get().students.map(s => s.id === studentId ? {\n      ...s,\n      recentActivity: \"recent\"\n    } : s);\n\n    // tweak garden positiveRatio in memory (never punitive)\n    const bt = get().behaviourTypes.find(b => b.id === behaviourId);\n    const bump = (bt === null || bt === void 0 ? void 0 : bt.type) === \"positive\" ? +0.05 : (bt === null || bt === void 0 ? void 0 : bt.type) === \"support\" || (bt === null || bt === void 0 ? void 0 : bt.type) === \"growth\" ? -0.03 : 0;\n    const students2 = students.map(s => {\n      var _s$positiveRatio;\n      return s.id === studentId ? {\n        ...s,\n        positiveRatio: Math.max(0, Math.min(1, ((_s$positiveRatio = s.positiveRatio) !== null && _s$positiveRatio !== void 0 ? _s$positiveRatio : 0.5) + bump))\n      } : s;\n    });\n    set({\n      behaviours,\n      students: students2\n    });\n  },\n  // Magic Moments (placeholder; plug real model later)\n  getPredictedActions: () => {\n    const {\n      students,\n      behaviourTypes\n    } = get();\n    if (!students.length) return [];\n    const positives = behaviourTypes.filter(b => b.type === \"positive\");\n    return students.slice(0, 2).map(s => ({\n      studentId: s.id,\n      studentName: s.name,\n      behaviourId: positives[Math.floor(Math.random() * positives.length)].id,\n      behaviourName: positives[0].name,\n      confidence: Math.floor(70 + Math.random() * 30)\n    }));\n  }\n}));","map":{"version":3,"names":["create","initialStudents","id","name","recentActivity","status","positiveRatio","useStore","set","get","currentView","setView","view","students","behaviours","behaviourTypes","type","color","icon","logBehaviour","studentId","behaviourId","note","entry","Date","now","timestamp","map","s","bt","find","b","bump","students2","_s$positiveRatio","Math","max","min","getPredictedActions","length","positives","filter","slice","studentName","floor","random","behaviourName","confidence"],"sources":["/Users/Kevin/Downloads/090825 classtrack_complete/src/state/useStore.js"],"sourcesContent":["import { create } from \"zustand\";\n\n// Minimal, safe defaults so nothing crashes while refactoring.\nconst initialStudents = [\n  { id: 1, name: \"Emma Thompson\", recentActivity: \"none\", status: \"thriving\", positiveRatio: 0.9 },\n  { id: 2, name: \"Liam Chen\", recentActivity: \"none\", status: \"growing\",   positiveRatio: 0.7 },\n  { id: 3, name: \"Sophie Taylor\", recentActivity: \"none\", status: \"resting\",  positiveRatio: 0.4 },\n];\n\nexport const useStore = create((set, get) => ({\n  // UI\n  currentView: \"weather\", // \"weather\" | \"garden\" | \"constellation\" | \"analytics\"\n  setView: (view) => set({ currentView: view }),\n\n  // Data\n  students: initialStudents,\n  behaviours: [],\n\n  // QuickLog behaviour types (aligned with your non‑punitive design)\n  behaviourTypes: [\n    { id: 1, name: \"Participation\",       type: \"positive\", color: \"#4A7C59\", icon: \"✋\" },\n    { id: 2, name: \"Helping Others\",      type: \"positive\", color: \"#673AB7\", icon: \"🤝\" },\n    { id: 3, name: \"Problem Solving\",     type: \"positive\", color: \"#1976D2\", icon: \"🧩\" },\n    { id: 4, name: \"Needs Movement\",      type: \"support\",  color: \"#FF9800\", icon: \"🏃\" },\n    { id: 5, name: \"Feeling Overwhelmed\", type: \"support\",  color: \"#E91E63\", icon: \"🌊\" },\n    { id: 6, name: \"Conflict Resolution\", type: \"growth\",   color: \"#9C27B0\", icon: \"🤝\" },\n  ],\n\n  // Actions\n  logBehaviour: ({ studentId, behaviourId, note = \"\" }) => {\n    const entry = { id: Date.now(), studentId, behaviourId, note, timestamp: new Date() };\n    const behaviours = [...get().behaviours, entry];\n\n    // light update to student's recentActivity\n    const students = get().students.map(s =>\n      s.id === studentId ? { ...s, recentActivity: \"recent\" } : s\n    );\n\n    // tweak garden positiveRatio in memory (never punitive)\n    const bt = get().behaviourTypes.find(b => b.id === behaviourId);\n    const bump = bt?.type === \"positive\" ? +0.05 : bt?.type === \"support\" || bt?.type === \"growth\" ? -0.03 : 0;\n    const students2 = students.map(s =>\n      s.id === studentId ? { ...s, positiveRatio: Math.max(0, Math.min(1, (s.positiveRatio ?? 0.5) + bump)) } : s\n    );\n\n    set({ behaviours, students: students2 });\n  },\n\n  // Magic Moments (placeholder; plug real model later)\n  getPredictedActions: () => {\n    const { students, behaviourTypes } = get();\n    if (!students.length) return [];\n    const positives = behaviourTypes.filter(b => b.type === \"positive\");\n    return students.slice(0, 2).map(s => ({\n      studentId: s.id,\n      studentName: s.name,\n      behaviourId: positives[Math.floor(Math.random() * positives.length)].id,\n      behaviourName: positives[0].name,\n      confidence: Math.floor(70 + Math.random() * 30),\n    }));\n  },\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}